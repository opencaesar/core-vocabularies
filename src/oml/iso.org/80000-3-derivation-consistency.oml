@dc:^description "Optional consistency rules to enforce that derived quantities are about the same object as the objects of their quantity factors."
vocabulary <http://iso.org/80000-3-derivation-consistency> with # as 80000-3-derivation-consistency {
  
  extends <http://iso.org/80000-3-quantities>

  @dc:^description "
  If an angular-measure, x, is derived from an arc-length, y, and a radius, z,
  then x, y, and z must be quantities about the same object."
  rule angular-measure-derivation-consistency [
    // x is the angular-measure quantity of an object, xo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:angular-measure(x) ^

    // y is the arc-length quantity of an object, yo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:arc-length(y) ^

    // z is the radius quantity of an object, zo. 
    metrology:Object(zo) ^
    metrology:Quantity(z) ^
    metrology:isQuantityOf(z,zo) ^
    80000-3-quantities:radius(z) ^

    // if there is a dimensional calculus constraint relating x as a derived from y and z
    80000-3-quantities:angular-measure-of-arc-length-forward(x,y) ^
    80000-3-quantities:angular-measure-of-radius-forward(x,z)
  
    ->

    // then all the quantities must be about the same object.
    sameAs(xo,yo) ^ sameAs(xo,yo)
  ]

  @dc:^description "
  If an rotational-displacement, x, is derived from an path-length, y, and a distance, z,
  then x, y, and z must be quantities about the same object."
  rule rotational-displacement-derivation-consistency [
    // am is the rotational-displacement quantity of an object, amo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:rotational-displacement(x) ^

    // al is the path-length quantity of an object, alo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:path-length(y) ^

    // r is the distance quantity of an object, ro. 
    metrology:Object(zo) ^
    metrology:Quantity(z) ^
    metrology:isQuantityOf(z,zo) ^
    80000-3-quantities:distance(z) ^

    // if there is a dimensional calculus constraint relating x as a derived from y and z
    80000-3-quantities:rotational-displacement-of-path-length-forward(x,y) ^
    80000-3-quantities:rotational-displacement-of-distance-forward(x,z)
  
    ->

    // then all the quantities must be about the same object.
    sameAs(xo,yo) ^ sameAs(xo,zo)
  ]
  
  @dc:^description "
  If a velocity, x, is derived from a position-vector, y, and a duration, z,
  then x, y, and z must be quantities of the same object."
  rule velocity-derivation-consistency [
    // x is the velocity quantity of an object, xo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:velocity(x) ^

    // y is the position-vector quantity of an object, yo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:position-vector(y) ^

    // z is the duration quantity of an object, zo.
    metrology:Object(zo) ^
    metrology:Quantity(z) ^
    metrology:isQuantityOf(z,zo) ^
    80000-3-quantities:duration(z) ^

    // if there is a dimensional calculus constraint relating x as a derived from y and z
    80000-3-quantities:velocity-of-position-vector-forward(x,y) ^
    80000-3-quantities:velocity-of-duration-forward(x,z)
  
    ->

    // then all the quantities must be of the same object.
    sameAs(xo,yo) ^ sameAs(xo,zo)
  ]

  @dc:^description "
  If a rotation, x, is derived from a rotational-displacement, y,
  then x and y must be quantities of the same object."
  rule rotation-derivation-consistency [
    // x is the rotation quantity of an object, xo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:velocity(x) ^

    // y is the rotational-displacement quantity of an object, yo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:position-vector(y) ^

    // if there is a dimensional calculus constraint relating x as a derived from y
    80000-3-quantities:rotation-of-rotational-displacement-forward(x,y)
  
    ->

    // then all the quantities must be of the same object.
    sameAs(xo,yo)
  ]

  @dc:^description "
  If a frequency, x, is derived from a period-duration, y,
  then x and y must be quantities of the same object."
  rule frequency-derivation-consistency [
    // x is the frequency quantity of an object, xo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:frequency(x) ^

    // y is the period-duration quantity of an object, yo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:period-duration(y) ^

    // if there is a dimensional calculus constraint relating x as a derived from y
    80000-3-quantities:rotation-of-rotational-displacement-forward(x,y)
  
    ->

    // then all the quantities must be of the same object.
    sameAs(xo,yo)
  ]

  @dc:^description "
  If a rotational-frequency, x, is derived from a rotation, y, and a duration, z,
  then x, y, and z must be quantities of the same object."
  rule rotational-frequency-derivation-consistency [
    // x is the rotational-frequency quantity of an object, xo.
    metrology:Object(xo) ^
    metrology:Quantity(x) ^
    metrology:isQuantityOf(x,xo) ^
    80000-3-quantities:rotational-frequency(x) ^

    // y is the rotation quantity of an object, yo.
    metrology:Object(yo) ^
    metrology:Quantity(y) ^
    metrology:isQuantityOf(y,yo) ^
    80000-3-quantities:rotation(y) ^

    // z is the duration quantity of an object, zo.
    metrology:Object(zo) ^
    metrology:Quantity(z) ^
    metrology:isQuantityOf(z,zo) ^
    80000-3-quantities:duration(z) ^

    // if there is a dimensional calculus constraint relating x as a derived from y and z
    80000-3-quantities:rotational-frequency-of-rotation-forward(x,y) ^
    80000-3-quantities:rotational-frequency-of-duration-forward(x,z)
  
    ->

    // then all the quantities must be of the same object.
    sameAs(xo,yo) ^ sameAs(xo,zo)
  ]
}
