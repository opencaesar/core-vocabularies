@dc:title="Mission Ontology"
@dc:type="Foundation"
@dc:^description="The Mission Ontology defines concepts and properties for describing missions in terms of their objectives, their constituent components, the functions those components perform, and the requirements that specify them."
@dc:rights="Copyright 2019, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.This software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."
@owl:versionInfo="$Revision$"
@dc:creator="Jet Propulsion Laboratory"
@dc:date="$Date$"
open terminology <http://opencaesar.io/foundation/mission#> as mission {

	extends <base.oml>

	@dc:^description="A <classname>PerformingElement</classname> is an object that <property>performs</property> one or more <classname>Function</classname>s."
	@rdfs:label="Performing Element"
	aspect PerformingElement

	@dc:^description="A <classname>PresentingElement</classname> <property>present</property>s zero or more <classname>Interface</classname>s that define its connections to the outside world."
	@rdfs:label="Presenting Element"
	aspect PresentingElement

	@rdfs:label="Specified Element"
	aspect SpecifiedElement

	@dc:^description="A <classname>TraversingElement</classname> is any model element that  <property>traverses</property> an <classname>Interface</classname>."
	@rdfs:label="Traversing Element"
	aspect TraversingElement

	@dc:^description="<p>A <classname>Component</classname> is a <classname>PerformingElement</classname> that is not a <classname>Mission</classname>. Example            <classname>Component</classname>s include launch vehicle, spacecraft, telecommunication subsystem,        flight software, attitude control software, and mission operations team.</p>"
	@rdfs:label="Component"
	concept Component specializes base:AggregatedElement, base:ContainedElement, base:Container, base:IdentifiedElement, PerformingElement, PresentingElement, SpecifiedElement {
		restricts every base:aggregates to Component
		restricts every base:isAggregatedIn to Component
		restricts every base:contains to Component
		restricts every base:isContainedIn to Component
	}

	@dc:^description="An <classname>Environment</classname> corresponds to a set of conditions in which a <classname>Component</classname> must <property>perform</property> its <classname>Function</classname>s.Example environments include low earth orbit, trans-Jupiter cruise, and Martian north polar surface."
	@rdfs:label="Environment"
	concept Environment specializes base:AggregatedElement, base:IdentifiedElement {
		restricts every base:isAggregatedIn to Environment
		restricts every base:aggregates to Environment
	}

	@dc:^description="A <classname>Flow</classname> represents a non-discrete transfer of matter or energy between <classname>Function</classname>s. Examples of <classname>Flow</classname> include electrical power, propellant, and heat."
	@rdfs:label="Flow"
	concept Flow specializes base:ContainedElement, base:Container, base:IdentifiedElement, TraversingElement {
		restricts every base:isContainedIn to Flow
		restricts every base:contains to Flow
	}

	@dc:^description="<p>A <classname>Function</classname> is an operation or activity performed by a            <classname>Component</classname> in the context of executing a            <classname>Mission</classname>. Every <classname>Function</classname> is a            <classname>SpecifiedElement</classname>, which implies that a            <classname>Requirement</classname> can <property>specify</property> a            <classname>Function</classname>. <classname>Function</classname>s, therefore,        represent intended <classname>Component</classname> behavior. Example            <classname>Function</classname>s include <emphasis role=\"italic\">search for life on            Mars</emphasis>, <emphasis role=\"italic\">insert into Martian orbit</emphasis>, and            <emphasis role=\"italic\">send instrument telemetry packet</emphasis>.</p>    <p><classname>Function</classname>s may <property>emit</property> or            <property>ingest</property>        <classname>Flow</classname>s representing non-discrete exchanges of matter or energy.            <classname>Function</classname>s may <property>send</property> or            <property>receive</property>        <classname>Item</classname>s representing discrete exchanges of matter or        information.</p>"
	@rdfs:label="Function"
	concept Function specializes base:IdentifiedElement {
		restricts every isInvokedBy to Function
		restricts every invokes to Function
	}

	@dc:^description="An <classname>Interchange</classname> represents the intended joint behavior of a pair of <classname>PerformingElement</classname>s. It indicates that a <classname>Flow</classname> or <classname>Item</classname> may be sent or emitted by one <classname>PerformingElement</classname> and received or ingested by another."
	@rdfs:label="Interchange"
	concept Interchange specializes base:IdentifiedElement

	@rdfs:label="Interchange Point"
	concept InterchangePoint specializes base:IdentifiedElement

	@dc:^description="<p>An <classname>Interface</classname> represents a set of mechanical, electrical, signal, or        other properties that describe some aspect of a <classname>Component</classname>\'s        connection to or interaction with another <classname>Component</classname>.</p>    <p>It is important to distinguish between a <classname>Component</classname>, which is a        discrete thing, and an <classname>Interface</classname>, which is a collection of        properties. In the formulation phase, for example, we might model the launch vehicle and the        spacecraft as <classname>Component</classname>s. The properties that describe how the        spacecraft is designed to attach to the launch vehicle would be captured in one            <classname>Interface</classname> (and associated with the spacecraft using the            <property>presents</property> property). The properties that describe how the launch        vehicle is designed or configured to attach to the spacecraft would be captured in another            <classname>Interface</classname>. The fact that two (or more) interfaces mate with each other is conveyed the existence of an <classname>Junction</classname> that <property>joins</property> the <classname>Interface</classname>s.</p>    <p>This method of modeling interfaces allows us to capture the asymmetric aspect of        producer/consumer relationships, as well as providing a convenient method for associating        the sets of properties and characterize the interconnection of any pair of            <classname>Component</classname>s so that they can be analyzed for consistency.</p>"
	@rdfs:label="Interface"
	concept Interface specializes base:IdentifiedElement, PresentingElement

	@dc:^description="An <classname>Item</classname> is a discrete unit of material or information exchanged between two <classname>Function</classname>s."
	@rdfs:label="Item"
	concept Item specializes base:ContainedElement, base:Container, base:IdentifiedElement, TraversingElement {
		restricts every base:isContainedIn to Item
		restricts every base:contains to Item
	}

	@dc:^description="<p>An <classname>Junction</classname> represents a set of mechanical, electrical, signal, or        other properties that are common to a set of mutually connected <classname>Interface</classname>s.</p>"
	@rdfs:label="Junction"
	concept Junction specializes base:ContainedElement, base:Container, base:IdentifiedElement {
		restricts every base:isContainedIn to Junction
		restricts every base:contains to Junction
	}

	@dc:^description="A <classname>MaterialItem</classname> is a discrete unit of material exchanged between two <classname>Function</classname>s. Example <classname>MaterialItem</classname>s include rock hammer and soil sample."
	@rdfs:label="Material Item"
	concept MaterialItem specializes Item {
		restricts every base:contains to MaterialItem
		restricts every base:isContainedIn to MaterialItem
	}

	@dc:^description="A <classname>Message</classname> is a discrete unit of information exchanged between two <classname>Function</classname>s. Example <classname>Message</classname>s include command, command response, and file contents."
	@rdfs:label="Message"
	concept Message specializes Item {
		restricts every base:contains to Message
		restricts every base:isContainedIn to Message
	}

	@dc:^description="<p>A <classname>Mission</classname> is a <classname>PerformingElement</classname> that <property>pursue</property>s <classname>Objectives</classname>.</p><p>A <classname>Mission</classname> may<property>contain</property><classname>Component</classname>s, but the preferred relationship is that a<classname>Mission</classname><property>deploy</property>s its systems (which are <classname>Component</classname>s). This convention allows for a <classname>Mission</classname> to be associated with shared or external <classname>Component</classname>s that it does not strictly <property>contain</property>.</p>"
	@rdfs:label="Mission"
	concept Mission specializes base:IdentifiedElement, PerformingElement, PresentingElement, SpecifiedElement

	@dc:^description="<p>An <classname>Objective</classname> represents a specific interest that one or more        stakeholders have in the successful execution of a mission. Example            <classname>Objective</classname>s include characterize the extent of the Europan ocean        and its relation to the deeper interior, characterize the Europan ice shell and any        subsurface water, including their heterogeneity, and the nature of surface-ice-ocean        exchange, and determine global Europan surface compositions and chemistry, especially as        related to habitability.</p>    <p><classname>Objective</classname>s differ from <classname>Requirement</classname>s in that        they are not the result of negotiated agreement between customer and supplier, they need not        be mutually consistent, and a <classname>Mission</classname>        <property>pursues</property> but need not completely achieve all its            <classname>Objective</classname>s. In a sense, the set of            <classname>Requirement</classname>s for a <classname>Mission</classname> represents the        minimum acceptable achievement of <classname>Objectives</classname> for a given cost,        schedule, and risk.</p>"
	@rdfs:label="Objective"
	concept Objective specializes base:AggregatedElement, base:IdentifiedElement {
		restricts every base:aggregates to Objective
		restricts every base:isAggregatedIn to Objective
	}

	@dc:^description="A <classname>Product</classname> is a tangible artifact that results from achievement of mission objectives, e.g., a science data product, a soil sample, etc."
	@rdfs:label="Product"
	concept Product specializes base:AggregatedElement, base:IdentifiedElement {
		restricts every base:isAggregatedIn to base:AggregatedElement
		restricts every base:aggregates to base:AggregatedElement
	}

	@dc:^description="<p>A <classname>Requirement</classname> specifies an assertion about a            <classname>SpecifiedElement</classname> (<classname>Component</classname>,            <classname>Function</classname>, or <classname>Interface</classname>) that must be true        for every acceptable realization of that element.</p>    <p>By definition, a <classname>Requirement</classname> that specifies a            <classname>Function</classname> is a <emphasis role=\"italic\">functional            requirement</emphasis>. A <classname>Requirement</classname> that specifies an            <classname>Interface</classname> is an <emphasis role=\"italic\">interface            requirement</emphasis>.  A <classname>Requirement</classname> that specifies a            <classname>Component</classname> is a <emphasis role=\"italic\">component            requirement</emphasis>.</p>"
	@rdfs:label="Requirement"
	concept Requirement specializes base:IdentifiedElement

	@dc:^description="Aa <classname>Mission</classname> <replaceable>m</replaceable> <property>deploys</property><classname>Component</classname> <replaceable>c</replaceable>if and only if <replaceable>m</replaceable> exploits or utilizes <replaceable>c</replaceable> in pursuit of  <classname>Objective</classname>s. Note that a given <classname>Mission</classname> may not <emphasis>own</emphasis> all the <classname>Component</classname>s it <property>deploys</property>; some <classname>Component</classname>s (e.g., ground system assets) may be shared with multiple missions."
	@rdfs:label="Deploys"
	reified relationship Deploys {
		source Mission
		target Component
		@rdfs:label="deploys"
		forward deploys
		@rdfs:label="is deployed by"
		inverse isDeployedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Function</classname> <replaceable>F</replaceable><property>emits</property>a <classname>Flow</classname> <replaceable>f</replaceable>if and only if <replaceable>F</replaceable> is the source of <replaceable>f</replaceable>."
	@rdfs:label="Emits"
	reified relationship Emits {
		source InterchangePoint
		target Flow
		@rdfs:label="emits"
		forward emits
		@rdfs:label="is emitted by"
		inverse isEmittedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@rdfs:label="Has Participant"
	reified relationship HasParticipant {
		source Interchange
		target TraversingElement
		@rdfs:label="has participant"
		forward hasParticipant
		@rdfs:label="participates in"
		inverse participatesIn
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Component</classname><replaceable>c</replaceable><property>induces</property> an <classname>Environment</classname><replaceable>e</replaceable>if and only if<replaceable>c</replaceable>generates or contributes to the conditions described in<replaceable>e</replaceable>."
	@rdfs:label="Induces"
	reified relationship Induces {
		source Component
		target Environment
		@rdfs:label="induces"
		forward induces
		@rdfs:label="is induced by"
		inverse isInducedBy
		asymmetric
		irreflexive
	}

	@dc:^description="An <classname>Environment</classname><replaceable>e</replaceable><property>influences</property>a<classname>Component</classname><replaceable>c</replaceable>if and only if<replaceable>c</replaceable>is subject to the conditions that define<replaceable>e</replaceable>."
	@rdfs:label="Influences"
	reified relationship Influences {
		source Environment
		target Component
		@rdfs:label="influences"
		forward influences
		@rdfs:label="is influenced by"
		inverse isInfluencedBy
		asymmetric
		irreflexive
	}

	@dc:^description="An<classname>Function</classname><replaceable>F</replaceable><property>ingests</property>a<classname>Flow</classname><replaceable>f</replaceable>if and only if<replaceable>F</replaceable>consumes or is otherwise the recipient of<replaceable>f</replaceable>."
	@rdfs:label="Ingests"
	reified relationship Ingests {
		source InterchangePoint
		target Flow
		@rdfs:label="ingests"
		forward ingests
		@rdfs:label="is ingested by"
		inverse isIngestedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>PerformingElement</classname> <replaceable>p</replaceable> <property>interchangesThrough</property> an <classname>InterchangePoint</classname> <replaceable>i</replaceable> if and only if <replaceable>p</replaceable> has as a consequence of execution an interchange of matter or information with some other <classname>PerformingElement</classname> via <replaceable>i</replaceable>. Exactly one <classname>PerformingElement</classname> <property>interchangesThrough</property> each <classname>InterchangePoint</classname>."
	@dc:^description="See <property>interchangesThrough</property>."
	@rdfs:label="Interchanges Through"
	reified relationship InterchangesThrough {
		source Function
		target InterchangePoint
		@rdfs:label="interchanges through"
		forward interchangesThrough
		@rdfs:label="is interchange point for"
		inverse isInterchangePointFor
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A<classname>Function</classname><replaceable>f<subscript>1</subscript></replaceable><property>invokes</property>a<classname>Function</classname><replaceable>f<subscript>2</subscript></replaceable>if and only if execution of <replaceable>f<subscript>1</subscript></replaceable>may directly cause execution of<replaceable>f<subscript>2</subscript></replaceable>."
	@rdfs:label="Invokes"
	reified relationship Invokes {
		source Function
		target Function
		@rdfs:label="invokes"
		forward invokes
		@rdfs:label="is invoked by"
		inverse isInvokedBy
	}

	@dc:^description="<p>An <classname>Interaction</classname><replaceable>i</replaceable><property>involves</property>a pair of<classname>Function</classname>s{<replaceable>f<subscript>1</subscript></replaceable>}and{<replaceable>f<subscript>2</subscript></replaceable>}if and only if{<replaceable>f<subscript>1</subscript></replaceable>} <property>emits</property> a <classname>Flow</classname> or<property>sends</property> an <classname>Item</classname>that{<replaceable>f<subscript>2</subscript></replaceable>} <property>ingests</property> or<property>receives</property>,</p>"
	@rdfs:label="Involves"
	reified relationship Involves {
		source Interchange
		target InterchangePoint
		@rdfs:label="involves"
		forward involves
		@rdfs:label="is involved in"
		inverse isInvolvedIn
		asymmetric
		irreflexive
	}

	@rdfs:label="Involves1"
	reified relationship Involves1 specializes Involves {
		source Interchange
		target InterchangePoint
		@rdfs:label="involves1"
		forward involves1
		@rdfs:label="is involved in1"
		inverse isInvolvedIn1
		functional
		asymmetric
		irreflexive
	}

	@rdfs:label="Involves2"
	reified relationship Involves2 specializes Involves {
		source Interchange
		target InterchangePoint
		@rdfs:label="involves2"
		forward involves2
		@rdfs:label="is involved in2"
		inverse isInvolvedIn2
		functional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>TraversingElement</classname> <replaceable>e</replaceable><property>traverses</property>an <classname>Junction</classname> <replaceable>j</replaceable>if and only if <replaceable>j</replaceable> provides a medium or channel for the transfer of <replaceable>e</replaceable>."
	@rdfs:label="Is Traversed By"
	reified relationship IsTraversedBy {
		source Junction
		target TraversingElement
		@rdfs:label="is traversed by"
		forward isTraversedBy
		@rdfs:label="traverses"
		inverse traverses
		asymmetric
		irreflexive
	}

	@dc:^description="<p>A <classname>Junction</classname><replaceable>j</replaceable><property>joins</property>a pair of<classname>Interface</classname>s{<replaceable>i<subscript>1</subscript></replaceable>}and{<replaceable>i<subscript>2</subscript></replaceable>}if and only ifthe set{<replaceable>i<subscript>k</subscript></replaceable>} share some type of connection and<replaceable>j</replaceable> represents properties common to all<classname>Interface</classname>s in{<replaceable>i<subscript>k</subscript></replaceable>} pertinent to that connection.</p>"
	@rdfs:label="Joins"
	reified relationship Joins {
		source Junction
		target Interface
		@rdfs:label="joins"
		forward joins
		@rdfs:label="is joined in"
		inverse isJoinedIn
		asymmetric
		irreflexive
	}

	@rdfs:label="Joins1"
	reified relationship Joins1 specializes Joins {
		source Junction
		target Interface
		@rdfs:label="joins1"
		forward joins1
		@rdfs:label="is joined in1"
		inverse isJoinedIn1
		asymmetric
		irreflexive
	}

	@rdfs:label="Joins2"
	reified relationship Joins2 specializes Joins {
		source Junction
		target Interface
		@rdfs:label="joins2"
		forward joins2
		@rdfs:label="is joined in2"
		inverse isJoinedIn2
		asymmetric
		irreflexive
	}

	@dc:^description="A<classname>Component</classname><replaceable>c</replaceable><property>performs</property>a<classname>Function</classname><replaceable>f</replaceable>if and only if<replaceable>c</replaceable>has the sole responsibility for execution of<replaceable>f</replaceable>."
	@rdfs:label="Performs"
	reified relationship Performs specializes SpecifiedElement {
		source PerformingElement
		target Function
		@rdfs:label="performs"
		forward performs
		@rdfs:label="is performed by"
		inverse isPerformedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Component</classname> <replaceable>c</replaceable> <property>presents</property> an <classname>Interface</classname> <replaceable>i</replaceable> if and only if <replaceable>c</replaceable> has a direct electrical, mechanical, or logical connection to the outside via <replaceable>i</replaceable>. Exactly one <classname>Component</classname> <property>presents</property> each <classname>Interface</classname>."
	@rdfs:label="Presents"
	reified relationship Presents specializes SpecifiedElement {
		source PresentingElement
		target Interface
		@rdfs:label="presents"
		forward presents
		@rdfs:label="is presented by"
		inverse isPresentedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>produces</property>."
	@dc:^description="A <classname>PerformingElement</classname><replaceable>e</replaceable><property>produces</property><classname>Product</classname><replaceable>p</replaceable>if and only if<replaceable>e</replaceable>is assigned sole responsbility, through performance of its allocated functions, for creation of<replaceable>p</replaceable>."
	@rdfs:label="Produces"
	reified relationship Produces specializes SpecifiedElement {
		source PerformingElement
		target Product
		@rdfs:label="produces"
		forward produces
		@rdfs:label="is produced by"
		inverse isProducedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Mission</classname> <replaceable>m</replaceable> <property>pursues</property> an <classname>Objective</classname> <replaceable>o</replaceable> if and only if the successful execution of <replaceable>m</replaceable> results in at least partial achievement of <replaceable>o</replaceable>."
	@rdfs:label="Pursues"
	reified relationship Pursues {
		source Mission
		target Objective
		@rdfs:label="pursues"
		forward pursues
		@rdfs:label="is pursued by"
		inverse isPursuedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Function</classname> <replaceable>F</replaceable><property>receives</property>an <classname>Item</classname> <replaceable>i</replaceable>if and only if <replaceable>F</replaceable> consumes <replaceable>i</replaceable>."
	@rdfs:label="Receives"
	reified relationship Receives {
		source InterchangePoint
		target Item
		@rdfs:label="receives"
		forward receives
		@rdfs:label="is received by"
		inverse isReceivedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Requirement</classname> <replaceable>l</replaceable> <property>refines</property> a <classname>Requirement</classname> <replaceable>h</replaceable> if and only if satisfaction of <replaceable>l</replaceable> implies partial satisfaction of <replaceable>h</replaceable>."
	@rdfs:label="Refines"
	@rdfs:comment="Change the superclass from base-embedding:BinaryDependency to StandardProfileL2:Refine"
	reified relationship Refines {
		source Requirement
		target Requirement
		@rdfs:label="refines"
		forward ^refines
		@rdfs:label="is refined by"
		inverse isRefinedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Function</classname> <replaceable>F</replaceable><property>sends</property>an <classname>Item</classname> <replaceable>i</replaceable>if and only if <replaceable>F</replaceable> is the source for <replaceable>i</replaceable>."
	@rdfs:label="Sends"
	reified relationship Sends {
		source InterchangePoint
		target Item
		@rdfs:label="sends"
		forward sends
		@rdfs:label="is sent by"
		inverse isSentBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Requirement</classname> <replaceable>r</replaceable> <property>specifies</property> a element <replaceable>e</replaceable> if and only if the properties of <replaceable>e</replaceable> are bound by <replaceable>r</replaceable>."
	@rdfs:label="Specifies"
	reified relationship Specifies {
		source Requirement
		target SpecifiedElement
		@rdfs:label="specifies"
		forward specifies
		@rdfs:label="is specified by"
		inverse isSpecifiedBy
		functional
		asymmetric
		irreflexive
	}

	@dc:^description="An <classname>Interface</classname><replaceable>i</replaceable><property>transfers</property>a<classname>TraversingElement</classname><replaceable>e</replaceable>if and only if<replaceable>i</replaceable>is the access point by which<replaceable>e</replaceable>enters or leaves a <classname>Component</classname>that<property>presents</property><replaceable>i</replaceable>."
	@rdfs:label="Transfers"
	reified relationship Transfers {
		source Interface
		target TraversingElement
		@rdfs:label="transfers"
		forward transfers
		asymmetric
		irreflexive
	}

	@dc:^description="An <classname>Interface</classname><replaceable>i</replaceable><property>transfersOut</property>a<classname>TraversingElement</classname><replaceable>e</replaceable>if and only if<replaceable>i</replaceable>is the access point by which<replaceable>e</replaceable>leaves a <classname>Component</classname>that<property>presents</property><replaceable>i</replaceable>."
	@rdfs:label="Transfers In"
	reified relationship TransfersIn specializes Transfers, SpecifiedElement {
		source Interface
		target TraversingElement
		@rdfs:label="transfers in"
		forward transfersIn
		asymmetric
		irreflexive
	}

	@dc:^description="An <classname>Interface</classname><replaceable>i</replaceable><property>transfersOut</property>a<classname>TraversingElement</classname><replaceable>e</replaceable>if and only if<replaceable>i</replaceable>is the access point by which<replaceable>e</replaceable>leaves a <classname>Component</classname>that<property>presents</property><replaceable>i</replaceable>."
	@rdfs:label="Transfers Out"
	reified relationship TransfersOut specializes Transfers, SpecifiedElement {
		source Interface
		target TraversingElement
		@rdfs:label="transfers out"
		forward transfersOut
		asymmetric
		irreflexive
	}

	@dc:^description="A <property>rationale</property> explains why a <classname>Requirement</classname> exists and why it <property>specifies</property> what it does."
	@rdfs:label="has rationale"
	scalar property hasRationale {
		domain Requirement
		range xsd:^string
		functional
	}

	ref reified relationship base:Contains specializes SpecifiedElement
}
