@dc:title="Project Ontology"
@dc:type="Foundation"
@dc:^description="The Project Ontology defines concepts and properties for describing a project in terms of its stakeholders, concerns, work breakdown, and deliverables. It provides a basis for specialization by domain experts."
@dc:rights="Copyright 2010-2014, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.\n\nThis software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."
@owl:versionInfo="$Revision$"
@dc:creator="Systems Engineering & Formulation Division"
@dc:date="$Date$"
open terminology <http://opencaesar.io/foundation/project#> as project {

	extends <analysis.oml>

	@dc:^description="An <classname>AssignedElement</classname> is any model element that can have the <property>isAssignedTo</property> relationship with a <classname>Role</classname>."
	@rdfs:label="Assigned Element"
	aspect AssignedElement specializes analysis:AnalyzedElement, analysis:CharacterizedElement

	@dc:^description="A <classname>DevelopedElement</classname> is any model element that manifests <classname>DevelopmentState</classname>s. Example <classname>DevelopedElement</classname>s include spacecraft, thermal test facility, and requirements document."
	@rdfs:label="Developed Element"
	aspect DevelopedElement specializes analysis:AnalyzedElement, analysis:CharacterizedElement, AssignedElement

	@dc:^description="A <classname>RealizedElement</classname> is any element that <property>realizes</property> or <property>isRealizedBy</property> another element."
	@rdfs:label="Realized Element"
	aspect RealizedElement specializes analysis:AnalyzedElement, analysis:CharacterizedElement

	@dc:^description="A <classname>SuppliedElement</classname> is any model element that an <classname>Authority</classname> properly <property>supplies</property>. Example <classname>SuppliedElement</classname>s include <classname>Mission</classname> and <classname>Component</classname>."
	@rdfs:label="Supplied Element"
	aspect SuppliedElement specializes analysis:AnalyzedElement, analysis:CharacterizedElement

	@dc:^description="An <classname>Authority</classname> is any entity that asserts a fact in a model. Example <classname>Authority</classname>s include\n<classname>Program</classname>,\n<classname>Project</classname>, and\n<classname>WorkPackage</classname>. (The association of an <classname>Authority</classname> with its asserted facts requires mechanisms outside the vocabulary of OWL itself, e.g., named graphs. For this reason, there is no object property <property>authorizes</property>. Authorization is conveyed by the organization of statements in a repository.)"
	@rdfs:label="Authority"
	concept Authority specializes base:Package

	@dc:^description="<p>A <classname>Concern</classname> represents a specific interest that one or more stakeholders have in the successful completion of a <classname>Project</classname> or <classname>Program</classname> and its <classname>Mission</classname>s. </p>"
	@rdfs:label="Concern"
	concept Concern specializes analysis:MeasuredElement, base:AggregatedElement, base:IdentifiedElement {
		restricts every base:aggregates to Concern
		restricts every base:isAggregatedIn to Concern
	}

	@dc:^description="A <classname>Deliverable</classname> is the result of successful execution of a <classname>Process</classname>. It may be an input to or prerequisite for another <classname>Process</classname>."
	@rdfs:label="Deliverable"
	concept Deliverable specializes base:IdentifiedElement

	@dc:^description="A <classname>DevelopmentState</classname> is a kind of\n<classname>Deliverable</classname> that represents a defined condition for a <classname>DevelopedElement</classname>. <classname>DevelopmentState</classname>s may be unique to the <classname>DevelopedElement</classname>; example <classname>DevelopmentState</classname>s for a <classname>Product</classname> include Preliminary, Draft, and Final."
	@rdfs:label="Development State"
	concept DevelopmentState specializes analysis:Characterization, Deliverable {
		restricts every analysis:characterizes to DevelopedElement
	}

	@dc:^description="A <classname>Facility</classname> is any asset (e.g., laboratory, assembly facility, test facility, etc.) whose <classname>DevelopmentState</classname> may be a <classname>Deliverable</classname> for a project process."
	@rdfs:label="Facility"
	concept Facility specializes base:IdentifiedElement, DevelopedElement

	@dc:^description="An <classname>Interchange</classname> represents the intended joint behavior of a pair of <classname>Process</classname>es. It indicates that a <classname>Deliverable</classname> may be delivered by one <classname>Process</classname> and received by the other <classname>Process</classname>."
	@rdfs:label="Interchange"
	concept Interchange specializes base:IdentifiedElement

	@rdfs:label="Interchange Point"
	concept InterchangePoint specializes base:IdentifiedElement

	@dc:^description="An <classname>Organization</classname> is any entity that <property>isResponsibleFor</property> a <classname>Authority</classname>."
	@rdfs:label="Organization"
	concept Organization specializes analysis:AnalyzedElement, analysis:CharacterizedElement

	@dc:^description="A <classname>Person</classname> corresponds to an individual named person. A <classname>Person</classname> <property>belongsTo</property> zero or more <classname>Organization</classname>s."
	@rdfs:label="Person"
	concept Person specializes base:IdentifiedElement

	@dc:^description="A <classname>Policy</classname> represents a specific exercise of authority that <property>binds</property> one or more model elements."
	@rdfs:label="Policy"
	concept Policy specializes analysis:AnalyzedElement, analysis:CharacterizedElement

	@dc:^description="A <classname>Process</classname> is an activity authorized by a <classname>WorkPackage</classname> in support of delivering a <classname>Component</classname> or producing a <classname>Product</classname>. Examples include <emphasis>design trajectory</emphasis>, <emphasis>conduct trade study</emphasis>, and <emphasis>review subsystem design</emphasis>."
	@rdfs:label="Process"
	concept Process specializes base:IdentifiedElement, AssignedElement, RealizedElement {
		restricts every realizes to Process
		restricts every isRealizedBy to Process
	}

	@dc:^description="A <classname>Product</classname> is a document or other artifact supplied by a <classname>WorkPackage</classname>. Example <classname>Product</classname>s include trade study reports, design documents, and inspection reports."
	@rdfs:label="Product"
	concept Product specializes base:AggregatedElement, base:IdentifiedElement, DevelopedElement, SuppliedElement {
		restricts every base:aggregates to Product
		restricts every base:isAggregatedIn to Product
	}

	@rdfs:label="Program"
	concept Program specializes Authority

	@dc:^description="A <classname>Project</classname> is a kind of <classname>Authority</classname> that <property>supplies</property> a related set of <classname>Mission</classname>s in pursuit of a set of <classname>Objective</classname>s."
	@rdfs:label="Project"
	concept Project specializes Authority, RealizedElement {
		restricts every realizes to Project
		restricts every isRealizedBy to Project
		restricts every supplies to mission:Mission
	}

	@dc:^description="A <classname>Role</classname> corresponds to a set of assignments meant to be filled by a single <classname>Person</classname>."
	@rdfs:label="Role"
	concept Role specializes base:IdentifiedElement

	@dc:^description="A <classname>Stakeholder</classname> is a person or organization with a recognized interest in the successful completion of a <classname>Project</classname> or <classname>Program</classname>. Example <classname>Stakeholder</classname>s include scientists, NASA Directorates, nuclear safety advocates, and the general public."
	@rdfs:label="Stakeholder"
	concept Stakeholder specializes base:IdentifiedElement

	@dc:^description="A <classname>WorkPackage</classname> represents a discrete unit of <classname>Project</classname> cost, schedule, and activity. <classname>WorkPackage</classname>s form a hierarchy called the Work Breakdown Structure."
	@rdfs:label="Work Package"
	concept WorkPackage specializes base:Package, Authority, RealizedElement {
		restricts every isRealizedBy to WorkPackage
		restricts every realizes to WorkPackage
		restricts every supplies to mission:Component
	}

	@rdfs:label="Approves"
	reified relationship Approves specializes HasAssignment, analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Role
		target Product
		@rdfs:label="approves"
		forward approves
		@rdfs:label="is approved by"
		inverse isApprovedBy
		asymmetric
		irreflexive
	}

	@rdfs:label="Authorizes"
	reified relationship Authorizes specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Authority
		target Authority
		@rdfs:label="authorizes"
		forward authorizes
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Person</classname> <property>belongsTo</property> zero or more <classname>Organization</classname>s."
	@rdfs:label="Belongs To"
	reified relationship BelongsTo specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Person
		target Organization
		@rdfs:label="belongs to"
		forward belongsTo
	}

	@dc:^description="See <property>binds</property>."
	@dc:^description="A <classname>Policy</classname>\n<replaceable>p</replaceable>\n<property>binds</property>\na <classname>SpecifiedElement</classname>\n<replaceable>e</replaceable>\nif and only if the course of action embodied in\n<replaceable>p</replaceable>\ngoverns the design, analysis, implementation, operation, or other applicable aspects of\n<replaceable>e</replaceable>."
	@rdfs:label="Binds"
	reified relationship Binds specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Policy
		target mission:SpecifiedElement
		@rdfs:label="binds"
		forward binds
		@rdfs:label="is bound by"
		inverse isBoundBy
		asymmetric
		irreflexive
	}

	@rdfs:label="Concurs"
	reified relationship Concurs specializes HasAssignment, analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Role
		target Product
		@rdfs:label="concurs"
		forward concurs
		@rdfs:label="is concurred by"
		inverse isConcurredBy
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>delegatesTo</property>."
	@dc:^description="A <classname>Role</classname>\n<replaceable>r<subscript>1</subscript></replaceable>\n<property>delegatesTo</property>\na <classname>Role</classname>\n<replaceable>r<subscript>2</subscript></replaceable>\nif and only if \n<replaceable>r<subscript>1</subscript></replaceable>\ngives direction or otherwise exercises authority over\n<replaceable>r<subscript>2</subscript></replaceable>."
	@rdfs:label="Delegates To"
	reified relationship DelegatesTo specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Role
		target Role
		@rdfs:label="delegates to"
		forward delegatesTo
		@rdfs:label="is delegate of"
		inverse isDelegateOf
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>delivers</property>."
	@dc:^description="A <classname>Process</classname> <replaceable>p</replaceable> <property>delivers</property> a <classname>Deliverable</classname> <replaceable>r</replaceable>if and only if the successful execution of <replaceable>p</replaceable> results in availability of <replaceable>r</replaceable>."
	@rdfs:label="Delivers"
	reified relationship Delivers specializes analysis:AnalyzedElement, analysis:CharacterizedElement, AssignedElement {
		source InterchangePoint
		target Deliverable
		@rdfs:label="delivers"
		forward delivers
		@rdfs:label="is delivered by"
		inverse isDeliveredBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>describes</property>."
	@dc:^description="A <classname>Product</classname>\n<replaceable>p</replaceable>\n<property>describes</property>\na <classname>DevelopmentElement</classname>\n<replaceable>e</replaceable>\nif and only if\n<replaceable>p</replaceable>\ncontains design, analysis, operations, or other information about\n<replaceable>e</replaceable>."
	@rdfs:label="Describes"
	reified relationship Describes specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Product
		target DevelopedElement
		@rdfs:label="describes"
		forward describes
		@rdfs:label="is described by"
		inverse isDescribedBy
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>executes</property>."
	@dc:^description="An <classname>Authority</classname> <replaceable>a</replaceable> <property>executes</property> a <classname>Process</classname> <replaceable>p</replaceable> if and only if <replaceable>a</replaceable> carries out any actions required for successful completion of <replaceable>p</replaceable> ."
	@rdfs:label="Executes"
	reified relationship Executes specializes mission:SpecifiedElement, AssignedElement {
		source Authority
		target Process
		@rdfs:label="executes"
		forward executes
		@rdfs:label="is executed by"
		inverse isExecutedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>Role</classname>\n<replaceable>r</replaceable>\n<property>hasAssignment</property>\nsome <classname>AssignedElement</classname>\n<replaceable>e</replaceable>\nif and only if \n<replaceable>r</replaceable>\nhas specific cognizance and/or responsibility for\n<replaceable>e</replaceable>."
	@dc:^description="See <property>hasAssignment</property>."
	@rdfs:label="Has Assignment"
	reified relationship HasAssignment specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Role
		target AssignedElement
		@rdfs:label="has assignment"
		forward hasAssignment
		@rdfs:label="is assigned to"
		inverse isAssignedTo
		asymmetric
		irreflexive
	}

	@rdfs:label="Has Participant"
	reified relationship HasParticipant specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Interchange
		target Deliverable
		@rdfs:label="has participant"
		forward hasParticipant
		@rdfs:label="participates in"
		inverse participatesIn
		asymmetric
		irreflexive
	}

	@dc:^description="An <classname>Organization</classname>\n<replaceable>o</replaceable>\n<property>hasResponsibilityFor</property>\nsome <classname>Authority</classname>\n<replaceable>a</replaceable>\nif and only if \n<replaceable>o</replaceable>\nprovides the actual workforce and execution of the work embodied in\n<replaceable>a</replaceable>. An example is the relation between a \"doing\" <classname>Organization</classname> and a <classname>WorkPackage</classname>."
	@dc:^description="See <property>hasResponsibilityFor</property>."
	@rdfs:label="Has Responsibility For"
	reified relationship HasResponsibilityFor specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Organization
		target Authority
		@rdfs:label="has responsibility for"
		forward hasResponsibilityFor
		@rdfs:label="is responsibility of"
		inverse isResponsibilityOf
		inverseFunctional
	}

	@dc:^description="See <property>hasRole</property>."
	@dc:^description="A <classname>Person</classname>\n<replaceable>p</replaceable>\n<property>hasRole</property>\n<classname>Role</classname>\n<replaceable>r</replaceable>\nif and only if \n<replaceable>p</replaceable>\nacts to execute the assignments of\n<replaceable>r</replaceable>."
	@rdfs:label="Has Role"
	reified relationship HasRole specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Person
		target Role
		@rdfs:label="has role"
		forward hasRole
		@rdfs:label="is role of"
		inverse isRoleOf
		inverseFunctional
		asymmetric
		irreflexive
	}

	@rdfs:label="Interchanges Through"
	reified relationship InterchangesThrough specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Process
		target InterchangePoint
		@rdfs:label="interchanges through"
		forward interchangesThrough
		@rdfs:label="is interchange point for"
		inverse isInterchangePointFor
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>PerformedElement</classname> <replaceable>p</replaceable> <property>invokes</property> a <classname>PerformedElement</classname> <replaceable>c</replaceable> if and only if the execution of <replaceable>c</replaceable> may be triggered or caused by and within the execution of <replaceable>p</replaceable>."
	@dc:^description="See <property>invokes</property>."
	@rdfs:label="Invokes"
	reified relationship Invokes specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Process
		target Process
		@rdfs:label="invokes"
		forward invokes
		@rdfs:label="is invoked by"
		inverse isInvokedBy
		irreflexive
	}

	@rdfs:label="Involves"
	reified relationship Involves specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Interchange
		target Process
		@rdfs:label="involves"
		forward involves
		@rdfs:label="is involved in"
		inverse isInvolvedIn
		asymmetric
		irreflexive
	}

	@rdfs:label="Involves1"
	reified relationship Involves1 specializes Involves {
		source Interchange
		target Process
		@rdfs:label="involves1"
		forward involves1
		@rdfs:label="is involved in1"
		inverse isInvolvedIn1
		functional
		asymmetric
		irreflexive
	}

	@rdfs:label="Involves2"
	reified relationship Involves2 specializes Involves {
		source Interchange
		target Process
		@rdfs:label="involves2"
		forward involves2
		@rdfs:label="is involved in2"
		inverse isInvolvedIn2
		functional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>DevelopmentalElement</classname>\n<replaceable>e</replaceable>\nhas <property>manifests</property>\na <classname>DevelopmentState</classname>\n<replaceable>s</replaceable>\nif and only if\n<replaceable>e</replaceable>\nattains\n<replaceable>s</replaceable>\nduring its development process."
	@dc:^description="See <property>manifests</property>."
	@rdfs:label="Manifests"
	reified relationship Manifests specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source DevelopedElement
		target DevelopmentState
		@rdfs:label="manifests"
		forward manifests
		@rdfs:label="is manfested by"
		inverse isManfestedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@rdfs:label="Prepares"
	reified relationship Prepares specializes HasAssignment, analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Role
		target Product
		@rdfs:label="prepares"
		forward prepares
		@rdfs:label="is prepared by"
		inverse isPreparedBy
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>produces</property>."
	@dc:^description="A <classname>WorkPackage</classname> <replaceable>w</replaceable> <property>produces</property> a <classname>Product</classname> <replaceable>p</replaceable> if and only if <replaceable>w</replaceable> is responsible for creation and development of <replaceable>p</replaceable>."
	@rdfs:label="Produces"
	@rdfs:comment="Subproperty of <property>isSuppliedBy</property>. Candidate for deprecation."
	@rdfs:comment="Subproperty of <property>supplies</property>. Candidate for deprecation."
	reified relationship Produces specializes Supplies, analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Authority
		target Product
		@rdfs:label="produces"
		forward produces
		@rdfs:label="is produced by"
		inverse isProducedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>SpecifiedElement</classname>\n<replaceable>c<subscript>1</subscript></replaceable>\n<property>realizes</property>\na <classname>SpecifiedElement</classname>\n<replaceable>c<subscript>2</subscript></replaceable>\nif and only if\n<replaceable>c<subscript>1</subscript></replaceable>\nis proffered by a supplier as a specification-compliant implementation of <replaceable>c<subscript>2</subscript></replaceable>."
	@dc:^description="See <property>realizes</property>."
	@rdfs:label="Realizes"
	reified relationship Realizes specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source RealizedElement
		target RealizedElement
		@rdfs:label="realizes"
		forward realizes
		@rdfs:label="is realized by"
		inverse isRealizedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A<classname>Process</classname> <replaceable>p</replaceable> <property>receives</property> a <classname>Deliverable</classname> <replaceable>r</replaceable> if and only if the successful execution of <replaceable>p</replaceable> is contingent on the receipt of <replaceable>r</replaceable>."
	@dc:^description="See <property>receives</property>."
	@rdfs:label="Receives"
	reified relationship Receives specializes analysis:AnalyzedElement, analysis:CharacterizedElement, AssignedElement {
		source InterchangePoint
		target Deliverable
		@rdfs:label="receives"
		forward receives
		@rdfs:label="is received by"
		inverse isReceivedBy
		asymmetric
		irreflexive
	}

	@rdfs:label="Relies On"
	reified relationship ReliesOn specializes analysis:AnalyzedElement, analysis:CharacterizedElement, AssignedElement {
		source Authority
		target DevelopedElement
		@rdfs:label="relies on"
		forward reliesOn
		@rdfs:label="is relied on by"
		inverse isReliedOnBy
		asymmetric
		irreflexive
	}

	@dc:^description="See <property>represents</property>."
	@dc:^description="A <classname>Stakeholder</classname> <replaceable>s</replaceable> <property>represents</property> <classname>Concern</classname> <replaceable>c</replaceable> if and only if <replaceable>s</replaceable> has a direct, legitimate, and recognized interest in <replaceable>c</replaceable> as it relates to a particular <classname>Project</classname> or <classname>Program</classname>."
	@rdfs:label="Represents"
	reified relationship Represents specializes analysis:AnalyzedElement, analysis:CharacterizedElement {
		source Stakeholder
		target Concern
		@rdfs:label="represents"
		forward represents
		@rdfs:label="is represented by"
		inverse isRepresentedBy
		asymmetric
		irreflexive
	}

	@dc:^description="A <classname>WorkPackage</classname> <replaceable>w</replaceable> <property>supplies</property> a <classname>Component</classname> <replaceable>c</replaceable> if and only if <replaceable>w</replaceable> is responsible for the acquisition and delivery of <replaceable>c</replaceable>."
	@dc:^description="See <property>supplies</property>."
	@rdfs:label="Supplies"
	reified relationship Supplies specializes analysis:AnalyzedElement, analysis:CharacterizedElement, AssignedElement {
		source Authority
		target SuppliedElement
		@rdfs:label="supplies"
		forward supplies
		@rdfs:label="is supplied by"
		inverse isSuppliedBy
		inverseFunctional
		asymmetric
		irreflexive
	}

	scalar date

	@dc:^description="A <classname>ScheduledElement</classname> <replaceable>e</replaceable>  <property>isRequiredNotLaterThan</property> <replaceable>d</replaceable> if and only if <replaceable>e</replaceable> must be completed or achieved no later than <replaceable>d</replaceable>."
	@rdfs:label="is required not later than"
	scalar property isRequiredNotLaterThan {
		domain Deliverable
		range date
		functional
	}

	ref concept mission:Objective specializes Concern, base:IdentifiedElement

	ref concept mission:Component specializes DevelopedElement, RealizedElement, SuppliedElement {
		restricts every isRealizedBy to mission:Component
		restricts every realizes to mission:Component
		restricts every isSuppliedBy to WorkPackage
	}

	ref concept mission:Function specializes RealizedElement {
		restricts every isRealizedBy to mission:Function
		restricts every realizes to mission:Function
	}

	ref concept mission:Interface specializes DevelopedElement, RealizedElement {
		restricts every isRealizedBy to mission:Interface
		restricts every realizes to mission:Interface
	}

	ref concept mission:Junction specializes DevelopedElement, RealizedElement {
		restricts every realizes to mission:Junction
		restricts every isRealizedBy to mission:Junction
	}

	ref concept mission:Mission specializes RealizedElement, SuppliedElement {
		restricts every isRealizedBy to mission:Mission
		restricts every realizes to mission:Mission
		restricts every isSuppliedBy to Project
	}
}
