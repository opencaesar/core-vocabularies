vocabulary <http://www.w3.org/2001/XMLSchema> with # as xsd {

	scalar anyAtomicType

	scalar anyURI

	scalar base64Binary

	scalar boolean

	scalar date

	scalar dateTime

	scalar dateTimeStamp

	scalar decimal

	scalar string

	scalar byte :> short [
		minInclusive -128
		maxInclusive 127
	]

	scalar int :> long [
		minInclusive -2147483648
		maxInclusive 2147483647
	]

	scalar long :> integer [
		minInclusive "-9223372036854775808"^^long
		maxInclusive "9223372036854775807"^^long
	]

	scalar negativeInteger :> nonPositiveInteger [
		maxInclusive -1
	]

	scalar nonNegativeInteger :> integer [
		minInclusive 0
	]

	scalar nonPositiveInteger :> integer [
		maxInclusive 0
	]

	scalar positiveInteger :> nonNegativeInteger [
		minInclusive 1
	]

	scalar short :> int [
		minInclusive -32768
		maxInclusive 32767
	]

	scalar unsignedByte :> unsignedShort [
		maxInclusive 255
	]

	scalar unsignedInt :> unsignedLong [
		maxInclusive "4294967295"^^unsignedInt
	]

	scalar unsignedLong :> nonNegativeInteger [
		maxInclusive "18446744073709551615"^^unsignedLong
	]

	scalar unsignedShort :> unsignedInt [
		maxInclusive 65535
	]

	scalar NCName :> name [
		pattern "[\i\c*&&[\i-[:]][\c-[:]]*]"
	]

	scalar NMTOKEN :> token [
		pattern "\c+"
	]

	scalar dayTimeDuration :> duration [
		pattern "[^YM]*(T.*)?"
	]

	scalar double :> anyAtomicType [
		pattern "(\+|\-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)([Ee](\+|\-)?[0-9]+)?|(\+|\-)?INF|NaN"
	]

	scalar duration :> anyAtomicType [
		pattern "-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\.[0-9]+)?S)?|([0-9]+(\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\.[0-9]+)?S)?|([0-9]+(\.[0-9]+)?S))))"
	]

	scalar float :> anyAtomicType [
		pattern "(\+|\-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)([Ee](\+|\-)?[0-9]+)?|(\+|\-)?INF|NaN"
	]

	scalar gDay :> anyAtomicType [
		pattern "---(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar gMonth :> anyAtomicType [
		pattern "--(0[1-9]|1[0-2])(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar gMonthDay :> anyAtomicType [
		pattern "--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar gYear :> anyAtomicType [
		pattern "-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar gYearMonth :> anyAtomicType [
		pattern "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar hexBinary :> anyAtomicType [
		pattern "([0-9a-fA-F]{2})*"
	]

	scalar integer :> decimal [
		pattern "[\-+]?[0-9]+"
	]

	scalar ^language :> token [
		pattern "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
	]

	scalar name :> token [
		pattern "\i\c*"
	]

	scalar normalizedString :> string [
		pattern "[^\n\r\t]"
	]

	scalar time :> anyAtomicType [
		pattern "(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?|(24:00:00(\.0+)?))(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?"
	]

	scalar token :> normalizedString [
		pattern "\S[\S[ ]{0,2}]\S"
	]

	scalar yearMonthDuration :> duration [
		pattern "[^DT]*"
	]
}