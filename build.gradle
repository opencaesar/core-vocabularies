/* 
 * The Maven coordinates for the project artifact
 */
description='The set of openCAESAR vocabulary ontologies'
group = 'io.opencaesar.ontologies'
version = '1.1.0'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/owl-adapter' }
		maven { url 'https://dl.bintray.com/opencaesar/owl-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		jcenter()
	}
	dependencies {
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.owl:oml2owl-gradle:+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:+'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
		// needed since gradle bintray brings an old version of xerces
		configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
	}
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL folder
	outputFolderPath = file('build/bikeshed')
	// Root ontology IRI
	rootOntologyIri='http://imce.jpl.nasa.gov/foundation/bundle'
	// Publish URL
	publishUrl = 'https://opencaesar.github.io/vocabularies/'
}

/*
 * A task to generate the Bikeshed documentations in HTML
 */
task generateDocs(dependsOn: omlToBikeshed) {
	doLast {
		exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
		exec { commandLine 'build/bikeshed/publish.sh' }
	}
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL catalog
	outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://imce.jpl.nasa.gov/foundation/bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://imce.jpl.nasa.gov/foundation/bundle/classes = ALL_SUBCLASS',
		'http://imce.jpl.nasa.gov/foundation/bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://imce.jpl.nasa.gov/foundation/bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}

/*
 * A task to build the project, which executes several tasks together
 */
task build() {
	dependsOn owlReason
}

/*
 * A task to delete the build artifacts
 */
task clean(type: Delete) {
	delete 'build'
}

/*
 * Publish to Maven spec
 */
apply plugin: 'maven-publish'

task omlZip(type: Zip) {
	from file('src')
	destinationDir(file('build/libs'))
	archiveBaseName = project.name
	archiveVersion = project.version
}

publishToMavenLocal.dependsOn omlZip

publishing {
    publications {
        maven(MavenPublication) {
            artifact omlZip
			pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                // Uncomment if this project has oml dependencies 
                /*configurations.oml.allDependencies.stream().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }*/
            }
        }
    }
}

/*
 * Publish to Bintrary Spec
 */
apply plugin: 'com.jfrog.bintray'

ext.gh = [
	dep: 'https://github.com',
	org: 'opencaesar',
	rep: 'vocabularies'
]

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		name = project.name
		repo = gh.rep
		userOrg = gh.org
		desc = project.description
		licenses = ['Apache-2.0']
		websiteUrl = gh.dep+'/'+gh.org+'/'+gh.rep
        issueTrackerUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'/issues'
		vcsUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}

}
